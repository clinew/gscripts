#!/bin/busybox sh
# History: (y/m/d)
# ------------------
# 2013.02.11 - Wade Cline
#    Completely gutted and re-made into something simple and dumb for his own
#    nefarious purposes. Muahaha. (obvious sarcasm is obvious, though IANAL)
# 2006.08.24 - Federico Zagarzazu
#    Fix: call splash_setup() if fbsplash args exist   
# 2006.08.06 - Federico Zagarzazu
#    Released.
# 2006.08.06 - Federico Zagarzazu
#    Fixed: /dev/device-mapper /dev/mapper/control issue 
#	   otherwise it fails on my amd64 system
# 2006.08.04 - Federico Zagarzazu
#    Bug fixes, several improvements.
#    Test phase finished.
# 2006.06.20 - Federico Zagarzazu
#    Written.
# 
# Thank you! 
# ---------------------------------------------------------------
# o Alon Bar-Lev [http://en.gentoo-wiki.com/wiki/Linux_Disk_Encryption_Using_LoopAES_And_SmartCards]
#	 I stole ideas, general structure and entire functions from his init script.
# o nix
#
# o Andreas Steinmetz [kernel doc: power/swsusp-dmcrypt.txt]

# The encryption key; this varies at different stages of the hashing/setup.
KEY=""
# Salt for the key-stretching algorithm.
SALT="GoGetYourOwnSalt"

# Exit this script.
die() {
	umount -n /mnt 2> /dev/null
	echo "$1"
	echo 
	echo "Dropping into a minimal shell..."
	exec /bin/sh
}

# Perform key-stretching.
# 1: The key to stretch.
# 2: (optional) Set the salt to use.
key_stretch() {
	# Validate arguments.
	if [ $# -lt 1 ]; then
		echo "key_stretch(); invalid argument count: $#."
	fi

	# Set the salt.
	if [ $# -eq 2 ]; then
		# Use the first 16 characters of the specified salt.
		SALT=$(echo $2 | cut -c 1-16)
	fi

	# Stretch the key.
	KEY=$(mkpasswd -m sha-256 -R 72851 $1 $SALT | cut -d '$' -f 5)
}

# Parse command-line arguments.
parse_cmdl_args() {
	local x
	CMDLINE=`cat /proc/cmdline`
	for param in $CMDLINE; do
		case "${param}" in
			root=*)
				ROOT="`echo "${param}" | cut -d'=' -f2`"
				;;
		esac
	done
}

# Mount the root filesystem.
setup() {
	DONE=`false`
	DEVICE_LOOP=""

	# Validate arguments.
	[ -n "${ROOT}" ] || die "Error: root missing."

	# Continuously try to mount the filesystem.
	until [ $DONE ]; do
		# Read the passphrase.
		echo "Passphrase:"
		read -s PASSPHRASE

		# Set up the key.
		DEVICE_LOOP=`losetup -f`
		losetup "${DEVICE_LOOP}" /key
		if [ "$?" -ne 0 ]; then
			die "Error setting up loop device."
		fi
		echo -n "Hashing/Setup."
		key_stretch "$PASSPHRASE"
		echo "$KEY" | cryptsetup create --cipher serpent-xts-essiv:sha256 --hash sha512 key0 "$DEVICE_LOOP"
		echo -n "."
		key_stretch "$KEY" "$KEY"
		echo "$KEY" | cryptsetup create --cipher aes-xts-essiv:sha256 --hash sha512 key1 /dev/mapper/key0
		echo -n "."
		key_stretch "$KEY" "$KEY"
		echo "$KEY" | cryptsetup create --cipher twofish-xts-essiv:sha256 --hash sha512 key2 /dev/mapper/key1
		echo -n "."
		key_stretch "$KEY" "$KEY"
		echo "$KEY" | cryptsetup create --cipher serpent-cbc-essiv:sha256 --hash sha512 key3 /dev/mapper/key2
		echo -n "."
		key_stretch "$KEY" "$KEY"
		echo "$KEY" | cryptsetup create --cipher aes-cbc-essiv:sha256 --hash sha512 key4 /dev/mapper/key3
		echo "."
		key_stretch "$KEY" "$KEY"
		echo "$KEY" | cryptsetup create --cipher twofish-cbc-essiv:sha256 --hash sha512 key5 /dev/mapper/key4
		
		# Set up root mappings.
		cryptsetup create --cipher serpent-xts-essiv:sha256 --key-file=/dev/mapper/key0 ".root0" "${ROOT}"
		cryptsetup create --cipher aes-xts-essiv:sha256 --key-file=/dev/mapper/key1 ".root1" "/dev/mapper/.root0"
		cryptsetup create --cipher twofish-xts-essiv:sha256 --key-file=/dev/mapper/key2 ".root2" "/dev/mapper/.root1"
		cryptsetup create --cipher serpent-cbc-essiv:sha256 --key-file=/dev/mapper/key3 ".root3" "/dev/mapper/.root2"
		cryptsetup create --cipher aes-cbc-essiv:sha256 --key-file=/dev/mapper/key4 ".root4" "/dev/mapper/.root3"
		cryptsetup create --cipher twofish-cbc-essiv:sha256 --key-file=/dev/mapper/key5 "root" "/dev/mapper/.root4"

		# Free the key.
		cryptsetup remove key5
		cryptsetup remove key4
		cryptsetup remove key3
		cryptsetup remove key2
		cryptsetup remove key1
		cryptsetup remove key0
		losetup -d "$DEVICE_LOOP"

		# Mount the filesystem.
		mount -t ext3 /dev/mapper/root /new-root
		if [ "$?" -ne 0 ]; then # Failure.
			# Clean-up root mappings.
			cryptsetup remove root
			cryptsetup remove root4
			cryptsetup remove root3
			cryptsetup remove root2
			cryptsetup remove root1
			cryptsetup remove root0

			# Check for retry.
			echo "Failure. Try again? [y/n]"
			read AGAIN
			if [ $AGAIN != "y" ]; then
				die "Quitting."
			fi
			
		else # Success.
			DONE=1
		fi
	done
}

# Switch root.
switch() {
	# Unmount everything and switch root filesystems for good:
	# exec the real init and begin the real boot process.
	echo > /proc/sys/kernel/hotplug
	echo "Switching / ..."
	/bin/umount -l /proc
	/bin/umount -l /sys
	/bin/umount -l /dev
	exec switch_root /new-root /sbin/init
}

# Validate the system. This function is not comprehensive.
system_validate() {
	# Check for 'mkpasswd'
	if ! command -v mkpasswd > /dev/null; then
		echo "Unable to find 'mkpasswd' utility."
		exit 1
	fi
}

# The main function (duh).
main() {
	# This seems to magically make things not instantly explode.
	# Fuck if I know why.
	/bin/busybox sleep 3
	# We need to make sure the script knows where to execute files from.
	# This will tell the shell where to search for executable files.
	export PATH=/sbin:/bin:/usr/bin
	# We need to make sure the busybox binaries are in the RAM filesystem.
	# This will extract the binaries from busybox and place them in their
	# correct (hopefully) directories. Not sure what the -s option does.
	/bin/busybox --install -s
	# I think that this sets permissions of any created files.
	umask 0777
	# Mount the proc filesystem.
	[ ! -d /proc ] && mkdir /proc
	/bin/mount -t proc proc /proc
	# Set up more directories...
	[ ! -d /tmp ] && mkdir /tmp
	[ ! -d /mnt ] && mkdir /mnt
	[ ! -d /new-root ] && mkdir /new-root
	# Mount the sysfs filesystem.
	/bin/mount -t sysfs sysfs /sys
	# Parse the command-line arguments into the appropriate shell variables.
	parse_cmdl_args
	# populate /dev from /sys
	/bin/mount -t devtmpfs devtmpfs /dev
	/sbin/mdev -s
	# handle hotplug events
	echo /sbin/mdev > /proc/sys/kernel/hotplug

	# Validate the system.
	system_validate

	# Mount the filesystem.
	setup

	# Switch root over.
	switch
}

main
